namespace Microsoft.Protocols.TestSuites.MS_VERSS
{
    using System;
    using System.Net;
    using System.Web.Services.Protocols;
    using Microsoft.Protocols.TestSuites.Common;
    using Microsoft.Protocols.TestTools;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    /// <summary>
    /// This scenario is designed to test the error conditions.
    /// </summary>
    [TestClass]
    public class S03_ErrorConditions : TestClassBase
    {
        #region Variables
        /// <summary>
        /// The instance of the SUT control adapter.
        /// </summary>
        private IMS_VERSSSUTControlAdapter sutControlAdapterInstance;

        /// <summary>
        /// The instance of the protocol adapter.
        /// </summary>
        private IMS_VERSSAdapter protocolAdapterInstance;

        /// <summary>
        /// The instance of ILISTSWSSUTControlAdapter interface.
        /// </summary>
        private IMS_LISTSWSSUTControlAdapter listsSutControlAdaterInstance;

        /// <summary>
        /// The name of list in the site.
        /// </summary>
        private string documentLibrary;

        /// <summary>
        /// The name of file in the list.
        /// </summary>
        private string fileName;

        /// <summary>
        /// The relative name of the file.
        /// </summary>
        private string fileRelativeUrl;

        /// <summary>
        /// The instance of the TestSuiteHelper class.
        /// </summary>
        private TestSuiteHelper testSuiteHelper;
        #endregion

        #region Test Suite Initialization
        /// <summary>
        /// Initialize the test class.
        /// </summary>
        /// <param name="testContext">Context information associated with MS-VERSS.</param>
        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext)
        {
            TestClassBase.Initialize(testContext);
        }

        /// <summary>
        /// Clean up the test class after all test cases finished running.
        /// </summary>
        [ClassCleanup]
        public static void ClassCleanup()
        {
            TestClassBase.Cleanup();
        }

        #endregion

        #region The test cases in S03_ErrrorConditions
        /// <summary>
        /// A test case used to test that the server returns soap fault message with corresponding error code when the specified file can't be found on server.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC01_FileNotFound()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            string nonExistentFileName = Common.GetConfigurationPropertyValue("NonExistentFileName", this.Site);

            // The variable is used to save the relative path of the non-exist file name in the document library.
            string fileUrl = this.documentLibrary + "/" + nonExistentFileName;

            // This variable is used to save the version of the non-exist file to be deleted.
            string fileVersionOfNonExist = "1.0";

            // Verify the requirements related with DeleteAllVersions operation.
            if (Common.IsRequirementEnabled(9301, this.Site) || Common.IsRequirementEnabled(9302, this.Site) || Common.IsRequirementEnabled(9303, this.Site))
            {
                try
                {
                    // Call DeleteAllVersion operation to delete the specified file that cannot find.
                    this.protocolAdapterInstance.DeleteAllVersions(fileUrl);
                    Site.Assert.Fail(
                        "The deleteAllVersion operation should fail. The specified file cannot be find.");
                }
                catch (SoapException ex)
                {
                    // The error is generated by the file specified by the fileName element of the DeleteAllVersions element
                    // could not be found on the site. 
                    // Verify the SOAPFaultDetails complex type related requirements in adapter.
                    errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                    errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                    Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}, the errorstring is {1}", errorCode, errorString);

                    if (Common.IsRequirementEnabled(9301, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R9301");

                        // Verify MS-VERSS requirement: MS-VERSS_R9301
                        Site.CaptureRequirementIfAreEqual<string>(
                            "0x81070906",
                            errorCode,
                            9301,
                            @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070906. (<2> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070906 error code.)");
                    }

                    if (Common.IsRequirementEnabled(9302, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R9302");

                        // Verify MS-VERSS requirement: MS-VERSS_R9302
                        Site.CaptureRequirementIfIsNull(
                            errorCode,
                            9302,
                            @"[In Appendix B: Product Behavior] Implementation does not return error code. (<2> Section 3.1.4.1.2.2: SharePoint Foundation 2010 returns no error code.)");
                    }

                    if (Common.IsRequirementEnabled(9303, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R9303");

                        Site.CaptureRequirementIfIsNull(
                            errorCode,
                            9303,
                            @"[In Appendix B: Product Behavior] Implementation does not return error code indicate that the system cannot find the specified file. Exception from HRESULT: 0x80070002. (Microsoft SharePoint Foundation 2013.)");
                    }
                }
            }

            // Verify the requirements related with DeleteVersion Operation.
            try
            {
                // Call DeleteVersion operation to delete the non-exist file.
                this.protocolAdapterInstance.DeleteVersion(fileUrl, fileVersionOfNonExist);
                Site.Assert.Fail(
                    "The DeleteVersion operation should fail since the file does not exist. The file URL is {0}",
                    fileUrl);
            }
            catch (SoapException ex)
            {
                // The error is generated when the file does not exist. Verify the SOAPFaultDetails complex type
                // related requirements in adapter.
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);

                string sutVersion = Common.GetConfigurationPropertyValue("SutVersion", this.Site);
                if (Common.IsRequirementEnabled(17802021, this.Site))
                {
                   // Add the debug information
                    Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R178");

                    // Verify MS-VERSS requirement: MS-VERSS_R178
                    Site.CaptureRequirementIfAreEqual<string>(
                        "0x80131600",
                        errorCode,
                        178,
                        @"[In DeleteVersionResponse] If the specified version does not exist, error code 0x80131600 is returned. ");

                    // Add the debug information
                    Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17802021");

                    // Verify MS-VERSS requirement: MS-VERSS_R17802021
                    Site.CaptureRequirementIfAreEqual<string>(
                        "0x80131600",
                        errorCode,
                        17802021,
                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x80131600, when the file does not exist. (SharePoint Foundation 2010 and above follow this behavior.)");
                }
            }

            // Verify the requirements related with GetVersion operation.
            try
            {
                // Call GetVersions operation with the non-exist file name.
                this.protocolAdapterInstance.GetVersions(fileUrl);
                Site.Assert.Fail(
                    "The GetVersions operation should fail since the file does not exist. The file URL is {0}",
                    fileUrl);
            }
            catch (SoapException ex)
            {
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);

                // Add the debug information
                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R181");

                // Verify MS-VERSS requirement: MS-VERSS_R181
                Site.CaptureRequirementIfIsNull(
                    errorCode,
                    181,
                    @"[In GetVersionsResponse] If the system cannot find the specified file, no error code will be return. ");
            }

            // Verify the requirements related with RestoreVersion Operation.
            if (Common.IsRequirementEnabled(15301, this.Site) || Common.IsRequirementEnabled(204, this.Site))
            {
                try
                {
                    // Call RestoreVersion operation to restore an non-exist file with right format version.
                    this.protocolAdapterInstance.RestoreVersion(fileUrl, fileVersionOfNonExist);
                    Site.Assert.Fail(
                        "The RestoreVersion operation should fail since the file does not exist. The file URL is {0}",
                        fileUrl);
                }
                catch (SoapException ex)
                {
                    // The error is generated if no file with the URL specified by the fileName element of
                    // the RestoreVersion element exist on this site.
                    // Verify the SOAPFaultDetails complex type related requirements in adapter.
                    errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                    errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                    Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}, the errorstring is {1}", errorCode, errorString);

                    if (Common.IsRequirementEnabled(15301, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R15302");

                        // Verify MS-VERSS requirement: MS-VERSS_R15302
                        Site.CaptureRequirementIfIsNull(
                            errorCode,
                            15302,
                            @"[In Appendix B: Product Behavior] Implementation does not return error code to indicate that the file specified by the fileName elements of the RestoreVersion element could not be found on the site. (SharePoint Foundation 2010 and above follow this behavior.)");
                    }

                    if (Common.IsRequirementEnabled(204, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20401");

                        string expectedErrorString = string.Format("There is no file with URL '{0}' in this Web.", fileUrl);

                        Site.Assert.AreEqual<string>(expectedErrorString, errorString, "The errorstring is {0}.", errorString);

                        // Verify MS-VERSS requirement: MS-VERSS_R20401
                        Site.CaptureRequirementIfAreEqual<string>(
                           "0x81070906",
                           errorCode,
                           20401,
                           @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070906 with the description ""There is no file with URL fileName in this Web."" to indicate that the file specified by the fileName elements of the RestoreVersion element could not be found on the site. (<8> Section 3.1.4.4.2.2:  Windows SharePoint Services 3.0 returns error code 0x81070906 with the description, ""There is no file with URL fileName in this Web."")");
                    }
                }
            }
        }

        /// <summary>
        /// A test case used to test that the server returns soap fault message with corresponding error code when the specific version of file can't be found on server.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC02_FileVersionNotFound()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // Enable the versioning of the list.
            bool isSetVersioningSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess,
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess = this.sutControlAdapterInstance.AddFile(
                this.documentLibrary, 
                this.fileName,
               TestSuiteHelper.UploadFileName);

            Site.Assert.IsTrue(
                isAddFileSuccess, 
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFileSuccess);

            // Check out and check in file three times to create three versions of the file. 
            this.testSuiteHelper.AddFileVersions();

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponse =
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
            this.testSuiteHelper.VerifyResultsInformation(getVersionsResponse.results, OperationName.GetVersions, true);

            // The variable is used to save the current file version.
            string currentVersion = AdapterHelper.GetCurrentVersion(getVersionsResponse.results.result);

            // This variable is used to save the version that does not exist,
            // since the current version is the max version that exists, so the current version plus 3 must not exist.
            string nonExistFileVersion = (Convert.ToDouble(currentVersion.Replace("@", string.Empty)) + 3).ToString();

            // Get the version number to be deleted.
            string deleteFileVersion = AdapterHelper.GetPreviousVersion(getVersionsResponse.results.result);

            // The variable is used to save the response of DeleteVersion.
            DeleteVersionResponseDeleteVersionResult deleteVersionResponse;

            // Verify the requirements related with DeleteVersion Operation.
            try
            {
                // Call DeleteVersion to delete a specific file version which does not exist.
                deleteVersionResponse = 
                    this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, nonExistFileVersion);
                Site.Assert.Fail(
                    "The DeleteVersion operation should fail since the specified version does not exist." +
                    " The file version is {0}",
                    nonExistFileVersion);
            }
            catch (SoapException ex)
            {
               // The error is generated if the specified version does not exist when calling DeleteVersion operation.
                // Verify the SOAPFaultDetails complex type related requirements in adapter.
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);

                string sutVersion = Common.GetConfigurationPropertyValue("SutVersion", this.Site);
                if (sutVersion == "SharePointFoundation2013" || sutVersion == "SharePointServer2013"
                    || sutVersion == "SharePointFoundation2010" || sutVersion == "SharePointServer2010"
                    || sutVersion == "SharePointServer2016")
                {
                    Site.Assert.AreEqual<string>(
                        "0x80131600",
                        errorCode,
                        "The error code is {0}",
                        errorCode);
                }

                if (sutVersion == "WindowsSharePointServices3" || sutVersion == "SharePointServer2007")
                {
                    Site.Assert.IsNull(errorCode, "{0} does not return an error code element", sutVersion);

                    Site.Assert.AreEqual<string>(
                        "Object reference not set to an instance of an object.",
                        errorString,
                        "The error string is {0}.",
                        errorString);
                }
            }

            // Verify the requirements related with RestoreVersion Operation.
            if (Common.IsRequirementEnabled(15301, this.Site) || Common.IsRequirementEnabled(204, this.Site))
            {
                try
                {
                    // Call RestoreVersion to restore a specific file version which does not exist.
                    this.protocolAdapterInstance.RestoreVersion(this.fileRelativeUrl, nonExistFileVersion);
                    Site.Assert.Fail(
                        "The RestoreVersion operation should fail since the specified version does not exist." +
                        " The file version is {0} ",
                        nonExistFileVersion);
                }
                catch (SoapException ex)
                {
                    // The error is generated if the file specified by the fileVersion elements of the RestoreVersion element
                    // could not be found on the site. Verify the SOAPFaultDetails complex type related requirements in adapter.
                    errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                    errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                    Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}, the errorstring is {1}", errorCode, errorString);

                    if (Common.IsRequirementEnabled(15301, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R15303");

                        // Verify MS-VERSS requirement: MS-VERSS_R15303
                        Site.CaptureRequirementIfIsNull(
                            errorCode,
                            15303,
                            @"[In Appendix B: Product Behavior] Implementation does not return error code to indicate that the file specified by the fileVersion elements of the RestoreVersion element could not be found on the site. (SharePoint Foundation 2010 and above follow this behavior.)");
                    }

                    if (Common.IsRequirementEnabled(204, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20402");

                        string expectedErrorString = string.Format("There is no file with URL '{0}' in this Web.", this.fileRelativeUrl);

                        Site.Assert.AreEqual<string>(expectedErrorString, errorString, "The errorstring is {0}.", errorString);

                        // Verify MS-VERSS requirement: MS-VERSS_R20402
                        Site.CaptureRequirementIfAreEqual<string>(
                           "0x81070906",
                           errorCode,
                           20402,
                           @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070906 with the description ""There is no file with URL fileName in this Web."" to indicate that the file specified by the fileVersion elements of the RestoreVersion element could not be found on the site. (<8> Section 3.1.4.4.2.2:  Windows SharePoint Services 3.0 returns error code 0x81070906 with the description, ""There is no file with URL fileName in this Web."")");
                    }
                }
            }

            // Call DeleteVersion to delete a specific version of the file by using the relative filename.
            deleteVersionResponse = this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, deleteFileVersion);
            this.testSuiteHelper.VerifyResultsInformation(deleteVersionResponse.results, OperationName.DeleteVersion, true);

            try
            {
                // Call DeleteVersion to delete the version deleted in the previous step. 
                this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, deleteFileVersion);
                Site.Assert.Fail(
                    "The DeleteVersion operation should fail since the specified version was deleted recently." +
                    "The file version is {0}", 
                    deleteFileVersion);
            }
            catch (SoapException ex)
            {
                // The error is generated if the specified version was recently deleted.
                // Verify the SOAPFaultDetails complex type related requirements in adapter.
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);

                string sutVersion = Common.GetConfigurationPropertyValue("SutVersion", this.Site);
                if (Common.IsRequirementEnabled(17802021, this.Site))
                {
                    // Add the debug information
                    Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17801");

                    // Verify MS-VERSS requirement: MS-VERSS_R17801
                    Site.CaptureRequirementIfAreEqual<string>(
                        "0x80131600",
                        errorCode,
                        17801,
                        @"[In DeleteVersionResponse] If the specified version was recently deleted, error code 0x80131600 is returned. ");
                }

                if (sutVersion == "WindowsSharePointServices3" || sutVersion == "SharePointServer2007")
                {
                    Site.Assert.IsNull(errorCode, "{0} does not return an error code element", sutVersion);

                    Site.Assert.AreEqual<string>(
                        "Object reference not set to an instance of an object.",
                        errorString,
                        "The error string is {0}.",
                        errorString);
                }
            }
        }

        /// <summary>
        /// A test case used to test that the current version of a file cannot be deleted.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC03_DeleteCurrentFileVersion()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // Enable the versioning of the list.
            bool isSetVersioningSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess,
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess = this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess, 
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isAddFileSuccess);

            // Check out and check in file one time to create a new version of the file. 
            this.testSuiteHelper.AddOneFileVersion(this.fileName);

            // Call GetVersions with the relative file name to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponse = 
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
            this.testSuiteHelper.VerifyResultsInformation(getVersionsResponse.results, OperationName.GetVersions, true);

            // Get the current version need to be deleted.
            string deleteFileVersion = AdapterHelper.GetCurrentVersion(getVersionsResponse.results.result);

            if (Common.IsRequirementEnabled(1780200, this.Site) || Common.IsRequirementEnabled(198, this.Site))
            {
                try
                {
                    // Call DeleteVersion operation to delete the current version of this file.
                    this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, deleteFileVersion);
                    Site.Assert.Fail(
                        "The DeleteVersion operation should fail since the specified version is current file version." +
                        " The file version is {0}", 
                        deleteFileVersion);
                }
                catch (SoapException ex)
                {
                    getVersionsResponse = this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);

                    errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                    errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                    Site.Log.Add(LogEntryKind.Debug, "The errorstring is {0}", errorString);

                    if (Common.IsRequirementEnabled(1780200, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1780200");

                        // Verify MS-VERSS requirement: MS-VERSS_R1780200
                        Site.CaptureRequirementIfAreEqual<string>(
                            "0x80131600",
                            errorCode,
                            1780200,
                            @"[In Appendix B: Product Behavior] Implementation does return error code 0x80131600, when the value specified by the fileVersion element is the current version of the file. (SharePoint Foundation 2010 and above follow this behavior.)");

                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R98");

                        // Verify MS-VERSS requirement: MS-VERSS_R98
                        Site.CaptureRequirementIfAreEqual<string>(
                            "0x80131600",
                            errorCode,
                            98,
                            @"[In DeleteVersion] This operation [DeleteVersion operation] MUST NOT grant deletion of the current version of the file.");
                    }

                    if (Common.IsRequirementEnabled(198, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R198");

                        Site.Assert.IsNull(errorCode, "Implementation does not return an error code element, the errorCode is {0}.", errorCode);

                        Site.Assert.AreEqual<string>(
                            "Object reference not set to an instance of an object.",
                            errorString,
                            "Implementation does return an error string, the errorString is {0}.",
                            errorString);

                        // Verify MS-VERSS requirement: MS-VERSS_R198
                        Site.CaptureRequirement(
                            198,
                            @"[In Appendix B: Product Behavior] Implementation does not return an error code element but does return an error string of ""Object reference not set to an instance of an object."" when the fileVersion is the current version of the file. (<7> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 does not return an error code element but does return an error string of ""Object reference not set to an instance of an object."")");

                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R98");

                        // Verify MS-VERSS requirement: MS-VERSS_R98
                        Site.CaptureRequirementIfIsNull(
                            errorCode,
                            98,
                            @"[In DeleteVersion] This operation [DeleteVersion operation] MUST NOT grant deletion of the current version of the file.");
                    }
                }
            }
        }

        /// <summary>
        /// A test case used to test that the published version of a file cannot be deleted.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC04_DeletePublishedFileVersion()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // Enable the versioning of the list.
            bool isSetVersioningSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess,
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess,
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isAddFileSuccess);

            // Check out and check in file one time to create a new version of the file. 
            this.testSuiteHelper.AddOneFileVersion(this.fileName);

            // Call SetFilePublish method to publish the current version as the published version.
            bool isSetFilePublishSuccess = 
                this.sutControlAdapterInstance.SetFilePublish(this.documentLibrary, this.fileName, true);
            Site.Assert.IsTrue(
                isSetFilePublishSuccess, 
                "SetFilePublish operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isSetFilePublishSuccess);

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponse =
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
            this.testSuiteHelper.VerifyResultsInformation(getVersionsResponse.results, OperationName.GetVersions, true);

            // Because the SetFilePublish method was called to publish
            // the current version as the published version two steps above.
            // So the current version is same as the published version. 
            string deleteFileVersion = AdapterHelper.GetCurrentVersion(getVersionsResponse.results.result);
            try
            {
                this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, deleteFileVersion);
                Site.Assert.Fail(
                    "The DeleteVersion operation should fail since the specified version is published version." +
                    " The file version is {0}",
                    deleteFileVersion);
            }
            catch (SoapException ex)
            {
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);

                getVersionsResponse = this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
                bool isPublishedVersionNotDeleted =
                    deleteFileVersion == AdapterHelper.GetCurrentVersion(getVersionsResponse.results.result);

                // Verify MS-VERSS requirement: MS-VERSS_R9801
                Site.CaptureRequirementIfIsTrue(
                    isPublishedVersionNotDeleted,
                    9801,
                    @"[In DeleteVersion] This operation [DeleteVersion operation] MUST NOT grant deletion of the published version of the file.");

                string sutVersion = Common.GetConfigurationPropertyValue("SutVersion", this.Site);
                if (Common.IsRequirementEnabled(17802011, this.Site))
                {
                    // Add the debug information
                    Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17802011");

                    // Verify MS-VERSS requirement: MS-VERSS_R17802011
                    Site.CaptureRequirementIfAreEqual<string>(
                        "0x80131600",
                        errorCode,
                        17802011,
                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x80131600, when the value specified by the fileVersion element is the publised version of the file. (SharePoint Foundation 2010 and above follow this behavior.)");
                }
            }
        }

        /// <summary>
        /// A test case used to test the server responses when the versioning is disabled.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC05_VersioningDisabled()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // Disable the versioning of the list.
            bool isSetVersioningSuccess =
                this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, false, false);
            Site.Assert.IsTrue(
                isSetVersioningSuccess, 
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess = this.sutControlAdapterInstance.AddFile(
                this.documentLibrary, 
                this.fileName,
                TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess,
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFileSuccess);

            // Check out and check in file one time to create a new version of the file. 
            this.testSuiteHelper.AddOneFileVersion(this.fileName);

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponse = 
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
            this.testSuiteHelper.VerifyResultsInformation(getVersionsResponse.results, OperationName.GetVersions, false);

            // Get the version that needs to be deleted.
            // Because the versioning of the list is disable, 
            // So the getVersionsResponse only contains one version information.
            string deleteFileVersion = getVersionsResponse.results.result[0].version;

            try
            {
                this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, deleteFileVersion);
                Site.Assert.Fail("The DeleteVersion operation should fail since versioning is disabled.");
            }
            catch (SoapException ex)
            {
                // Verify if versioning is disabled, the error code will be returned from server
                // when calling DeleteVersion operation.
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}", errorCode);
            }

            try
            {
                this.protocolAdapterInstance.RestoreVersion(this.fileRelativeUrl, deleteFileVersion);
                Site.Assert.Fail("The RestoreVersion operation should fail since versioning is disabled.");
            }
            catch (SoapException ex)
            {
                // Verify if versioning is disabled, the error code will be returned from server
                // when calling RestoreVersion operation.
                // Since there is an exception, it verifies that the RestoreVersion operation returns 
                // an error when versioning is disabled.
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}, The errorString is {1}.", errorCode, errorString);
            }

            // Call DeleteAllVersions operation with the absolute filename to delete all the previous versions except
            // the published version and the current version.
            DeleteAllVersionsResponseDeleteAllVersionsResult deleteAllVersionsResponse =
                this.protocolAdapterInstance.DeleteAllVersions(this.fileRelativeUrl);

            // Verify the DeleteAllVersions response results.
            this.testSuiteHelper.VerifyResultsInformation(deleteAllVersionsResponse.results, OperationName.DeleteAllVersions, false);
        }

        /// <summary>
        /// A test case used to test that, if the file is not already checked out, 
        /// and the protocol server enforces that only checked out files can be modified, 
        /// the RestoreVersion operation can't allow restoration of the file.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC06_RestoreVersionNotCheckout()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // Enable the versioning of the list.
            bool isSetVersioningSuccess = 
                this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess, 
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess, 
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFileSuccess);

            // Check out and check in file three times to create three versions of the file. 
            this.testSuiteHelper.AddFileVersions();

            // Enforce check out in the list.
            bool isSetServerEnforceCheckOutSuccess =
                this.sutControlAdapterInstance.SetEnforceCheckout(this.documentLibrary, true);
            Site.Assert.IsTrue(
                isSetServerEnforceCheckOutSuccess,
                "SetServerEnforceCheckOut operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetServerEnforceCheckOutSuccess);

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponse = 
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
            this.testSuiteHelper.VerifyResultsInformation(getVersionsResponse.results, OperationName.GetVersions, true);

            // This variable is used to save the version that needs to be restored.
            string restoreFileVersion = AdapterHelper.GetPreviousVersion(getVersionsResponse.results.result);

            if (Common.IsRequirementEnabled(18801, this.Site) || Common.IsRequirementEnabled(205, this.Site))
            {
                try
                {
                    // Call RestoreVersion operation to restore the file which is not checked out. 
                    this.protocolAdapterInstance.RestoreVersion(this.fileRelativeUrl, restoreFileVersion);
                    Site.Assert.Fail("The RestoreVersion operation should fail since the file is not" +
                        " checked out when check out is enforced.");
                }
                catch (SoapException ex)
                {
                    GetVersionsResponseGetVersionsResult getVersionsResponseAfterRestore =
                        this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
                    bool isResponseNotChange = AdapterHelper.AreVersionsResultEqual(
                        getVersionsResponse.results.result,
                        getVersionsResponseAfterRestore.results.result);

                    errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                    Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}.", errorCode);

                    // Add the debug information
                    Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R136");

                    // Verify MS-VERSS requirement: MS-VERSS_R136 
                    // Since there is a returned error which indicates the operation is not allowed if the file
                    // is not checked out when check out is enforced, and the file versions are not changed, so R136 can be captured.
                    Site.CaptureRequirementIfIsTrue(
                        isResponseNotChange,
                        136,
                        @"[In RestoreVersion] If the file is not already at the checked out publishing level, and the protocol server enforces that only checked out files can be modified, this operation MUST NOT allow the restoration of the file.");

                    if (Common.IsRequirementEnabled(18801, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R18801");

                        // Verify MS-VERSS requirement: MS-VERSS_R18801
                        Site.CaptureRequirementIfAreEqual<string>(
                            "0x8007009e",
                            errorCode,
                            18801,
                            @"[In Appendix B: Product Behavior] Implementation returns the error code 0x8007009E to indicate that the file is not checked out, the error code is 0x8007009E. (SharePoint Foundation 2010 and above follow this behavior.)");
                    }

                    if (Common.IsRequirementEnabled(205, this.Site))
                    {
                        // Add the debug information
                        Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R205");

                        // Verify MS-VERSS requirement: MS-VERSS_R205
                        Site.CaptureRequirementIfAreEqual<string>(
                           "0x81070975",
                           errorCode,
                           205,
                           @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070975. (<9> Section 3.1.4.4.2.2:  Windows SharePoint Services 3.0 returns error code 0x81070975.)");
                    }
                }
            }
        }

        /// <summary>
        /// A test case used to test that a file cannot be restored to a deleted version.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC07_RestoreDeletedVersion()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // Enable the versioning of the list.
            bool isSetVersioningSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess,
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess, 
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFileSuccess);
            
            // Check out and check in file three times to create three versions of the file. 
            this.testSuiteHelper.AddFileVersions();

            // Enforce check out in the list.
            bool isSetServerEnforceCheckOutSuccess =
                this.sutControlAdapterInstance.SetEnforceCheckout(this.documentLibrary, false);
            Site.Assert.IsTrue(
                isSetServerEnforceCheckOutSuccess, 
                "SetServerEnforceCheckOut operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetServerEnforceCheckOutSuccess);

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponse = 
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
            this.testSuiteHelper.VerifyResultsInformation(getVersionsResponse.results, OperationName.GetVersions, true);

            // The variable is used to save the version needs to be deleted.
            string deleteVersion = AdapterHelper.GetPreviousVersion(getVersionsResponse.results.result);

            // Enable the Recycle Bin.
            bool result = this.sutControlAdapterInstance.SetRecycleBinEnable(true);
            Site.Assert.IsTrue(
                result,
                "SetRecycleBinEnable operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                result);

            DeleteVersionResponseDeleteVersionResult deleteVersionResponse = 
                this.protocolAdapterInstance.DeleteVersion(this.fileRelativeUrl, deleteVersion);
            this.testSuiteHelper.VerifyResultsInformation(deleteVersionResponse.results, OperationName.DeleteVersion, true);

            // This variable is used to save the Boolean value which indicates whether the file version exists in Recycle Bin.
            bool isFileExistInRecycleBin = 
                this.sutControlAdapterInstance.IsFileExistInRecycleBin(this.fileName, deleteVersion);
            Site.Assert.IsTrue(
                isFileExistInRecycleBin, 
                "The file version {0} should exist in Recycle Bin.", 
                deleteVersion);

            try
            {
                // Call RestoreVersion operation to restore the file version which is in Recycle Bin. 
                this.protocolAdapterInstance.RestoreVersion(this.fileRelativeUrl, deleteVersion);
                Site.Assert.Fail(
                    "The RestoreVersion operation should fail since the file version is in Recycle Bin." +
                    " The file version is {0}",
                    deleteVersion);
            }
            catch (SoapException ex)
            {
                errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                Site.Log.Add(LogEntryKind.Debug, "The errorcode is {0}.", errorCode);

                bool isErrorCodeRight = errorCode == null || errorCode == "0x81070906";

                // Add the debug information 
                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R183, the error message is {0}", ex.Message);

                // Verify MS-VERSS requirement: MS-VERSS_R183 
                Site.CaptureRequirementIfIsTrue(
                isErrorCodeRight,
                183,
                @"[In RestoreVersion] When restoring a version, the version MUST NOT be in the Recycle Bin .");

                // Verify MS-VERSS requirement: MS-VERSS_R18301 
                Site.CaptureRequirementIfIsTrue(
                isErrorCodeRight,
                18301,
                @"[In RestoreVersion] When restoring a version, the version MUST NOT have been deleted.");
            }
        }

        /// <summary>
        /// A test case used to test that the server returns soap fault message with corresponding error code
        /// when the client calls the DeleteAllVersions operation with fileName contains invalid characters.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC08_DeleteAllVersionsUsingInvalidCharacters()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // Enable the versioning of the list.
           bool isSetVersioningSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess,
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess,
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFileSuccess);

            // Check out and check in file one time to create a new version of the file. 
            this.testSuiteHelper.AddOneFileVersion(this.fileName);

            // The variable is used to save the invalid characters for file name.
            string[] invalidCharacters = new string[] 
            { 
                "\"", "#", "%", "&", "*", ":", "<", "=", ">", "?", "\\",
                "{", "|", "}", "~", "..", "\t", "\n", "\r"
            };

            // The variable is used to save the file relative URL that contains "# or ? and file name" 
            // which will be truncated, and '\t' or '\' is at the end of file name. So fileURL is still a valid URL.
            foreach (string truncatedCharacter in invalidCharacters)
            {
                if (truncatedCharacter == "#" || truncatedCharacter == "?" || truncatedCharacter == "\t" || truncatedCharacter == "\\")
                {
                    string fileURL = string.Empty;

                    if (truncatedCharacter == "\t" || truncatedCharacter == "\\")
                    {
                        fileURL = this.documentLibrary + "/" + this.fileName + truncatedCharacter;
                    }
                    else if (truncatedCharacter == "#" || truncatedCharacter == "?")
                    {
                        fileURL = this.documentLibrary + "/" + this.fileName + truncatedCharacter + this.fileName;
                    }

                    // Call DeleteAllVersion operation to delete the all file version via the valid file relative URL.
                    DeleteAllVersionsResponseDeleteAllVersionsResult deleteAllVersionsResponse = this.protocolAdapterInstance.DeleteAllVersions(fileURL);
                    this.testSuiteHelper.VerifyResultsInformation(deleteAllVersionsResponse.results, OperationName.DeleteAllVersions, true);

                    // Call GetVersions with the filename to get details about all versions of the file.
                    GetVersionsResponseGetVersionsResult getVersionsResponse = this.protocolAdapterInstance.GetVersions(fileURL);

                    // Verify the DeleteAllVersions response results.
                    bool isDeleteAllVersionWithoutDeleteAnyVersions = AdapterHelper.AreVersionsResultEqual(
                        getVersionsResponse.results.result,
                        deleteAllVersionsResponse.results.result);

                    if (truncatedCharacter == "#")
                    {
                        if (Common.IsRequirementEnabled(1930201, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930201");

                            // Verify MS-VERSS requirement: MS-VERSS_R1930201
                            Site.CaptureRequirementIfIsTrue(
                                isDeleteAllVersionWithoutDeleteAnyVersions,
                                1930201,
                                @"[In Appendix B: Product Behavior] Implementation does truncates all characters after the first ""#"" in the file name. (<4> Section 3.1.4.1.2.2:  Windows SharePoint Services truncates all characters after the first ""#"" in the file name.)");
                        }
                    }
                    else if (truncatedCharacter == "?")
                    {
                        if (Common.IsRequirementEnabled(1930202, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930202");

                            // Verify MS-VERSS requirement: MS-VERSS_R1930202
                            Site.CaptureRequirementIfIsTrue(
                                isDeleteAllVersionWithoutDeleteAnyVersions,
                                1930202,
                                @"[In Appendix B: Product Behavior] Implementation does truncates all characters after the first ""?"" in the file name. (<4> Section 3.1.4.1.2.2:  Windows SharePoint Services truncates all characters after the first ""?"" in the file name.)");
                        }
                    }
                    else if (truncatedCharacter == "\t")
                    {
                        if (Common.IsRequirementEnabled(19302, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19302");

                            // Verify MS-VERSS requirement: MS-VERSS_R19302
                            Site.CaptureRequirementIfIsTrue(
                                isDeleteAllVersionWithoutDeleteAnyVersions,
                                19302,
                                @"[In Appendix B: Product Behavior] Implementation does not return an error to indicate that the tab (\t) character is at the end of the fileName. (<4> Section 3.1.4.1.2.2: The tab (\t) character is ignored at the end of the fileName on Windows SharePoint Services 3.0, SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016.)");
                        }
                    }
                    else if (truncatedCharacter == "\\")
                    {
                        if (Common.IsRequirementEnabled(1930205, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930205");

                            // Verify MS-VERSS requirement: MS-VERSS_1930205
                            Site.CaptureRequirementIfIsTrue(
                                isDeleteAllVersionWithoutDeleteAnyVersions,
                                1930205,
                                @"[In Appendix B: Product Behavior] Implementation does not return an error to indicate that the backward slash (\) character is at the end of the fileName. (<4> Section 3.1.4.1.2.2: The backward slash (\) character is ignored at the end of the fileName on Windows SharePoint Services 3.0, SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016.)");
                        }
                    }

                    // Check out and check in file one time to create a new version of the file. 
                    this.testSuiteHelper.AddOneFileVersion(this.fileName);
                }
            }

            bool isR17201Enabled = Common.IsRequirementEnabled(17201, this.Site);
            bool isR1930101Enabled = Common.IsRequirementEnabled(1930101, this.Site);

            if (isR17201Enabled || isR1930101Enabled || Common.IsRequirementEnabled(1930213, this.Site) || Common.IsRequirementEnabled(1930203, this.Site) || Common.IsRequirementEnabled(1930214, this.Site) || Common.IsRequirementEnabled(1930204, this.Site))
            {
                foreach (string invalidCharacter in invalidCharacters)
                {
                    // The variable is used to save a file name with an invalid character.
                    string fileRelativeUrlWithInvalidCharacter = this.documentLibrary + "/" +
                        this.fileName.Substring(0, this.fileName.IndexOf(".", System.StringComparison.CurrentCulture)) + invalidCharacter +
                        this.fileName.Substring(this.fileName.IndexOf(".", System.StringComparison.CurrentCulture));

                    try
                    {
                        this.protocolAdapterInstance.DeleteAllVersions(fileRelativeUrlWithInvalidCharacter);
                        Site.Assert.Fail(
                            "The deleteAllVersion operation should fail. The invalid character is {0}",
                            invalidCharacter);
                    }
                    catch (SoapException ex)
                    {
                        errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                        errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                        Site.Log.Add(LogEntryKind.Debug, "The errorCode is {0}", errorCode);
                        if (invalidCharacter == "\"")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17202");

                                // Verify MS-VERSS requirement: MS-VERSS_R17202
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17202,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Double quotation mark (""). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930103");

                                Site.CaptureRequirementIfAreEqual(
                                    "0x81070905",
                                    errorCode,
                                    1930103,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Double quotation mark (""). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "#")
                        {
                            if (Common.IsRequirementEnabled(1930213, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930213");

                                Site.Assert.IsNull(errorCode, "The errorCode is {0}.", errorCode);

                                // Verify MS-VERSS requirement: MS-VERSS_R1930213
                                Site.CaptureRequirementIfIsNotNull(
                                    errorString,
                                    1930213,
                                    @"[In Appendix B: Product Behavior] Implementation does return a SOAP exception. (<4> Section 3.1.4.1.2.2:  [Windows SharePoint Services truncates all characters after the first "#" in the file name. ] If the truncated file name does not exist on the server, SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016 returns a SOAP server exception.)");
                            }

                            if (Common.IsRequirementEnabled(1930203, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930203");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930203
                                Site.CaptureRequirementIfAreEqual(
                                    "0x81070906",
                                    errorCode,
                                    1930203,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070906. (<4> Section 3.1.4.1.2.2:  [Windows SharePoint Services truncates all characters after the first ""#"" in the file name. ] If the truncated file name does not exist on the server, Windows SharePoint Services 3.0 returns the 0x81070906 error code.)");
                            }
                        }
                        else if (invalidCharacter == "%")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17205");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17205,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Percent sign (%). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930105");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930105,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Percent sign (%). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "&")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17206");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17206,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Ampersand (&). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930106");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930106,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Ampersand (&). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "*")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17207");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17207,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Asterisk (*). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930107");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930107,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Asterisk (*). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == ":")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17208");

                                Site.CaptureRequirementIfAreEqual<string>(
                                        "0x81020030",
                                        errorCode,
                                        17208,
                                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Colon (:). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930108");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930108,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Colon (:). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "<")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17209");

                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17209,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Left angle bracket (<). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930109");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930109
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930109,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Left angle bracket (<). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "=")
                        {
                            if (Common.IsRequirementEnabled(1930208, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930208");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930208
                                Site.CaptureRequirementIfIsNull(
                                    errorCode,
                                    1930208,
                                    @"[In Appendix B: Product Behavior] Implementation does return a SOAP exception without an error code if fileName contains equals sign (=). (<4> Section 3.1.4.1.2.2: If fileName contains equals sign (=), SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016 return a SOAP exception without an error code.)");
                            }
                        }
                        else if (invalidCharacter == ">")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17211");

                                // Verify MS-VERSS requirement: MS-VERSS_R17211
                                Site.CaptureRequirementIfAreEqual<string>(
                                        "0x81020030",
                                        errorCode,
                                        17211,
                                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Right angle bracket (>). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930111");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930111
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930111,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Right angle bracket (>). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "?")
                        {
                            if (Common.IsRequirementEnabled(1930214, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930214");

                                Site.Assert.IsNull(errorCode, "The errorCode is {0}.", errorCode);

                                // Verify MS-VERSS requirement: MS-VERSS_R1930214
                                Site.CaptureRequirementIfIsNotNull(
                                    errorString,
                                        1930214,
                                        @"[In Appendix B: Product Behavior] Implementation does return a SOAP exception. (<4> Section 3.1.4.1.2.2:  [Windows SharePoint Services truncates all characters after the first "" ? "" in the file name. ] If the truncated file name does not exist on the server, SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016 returns a SOAP server exception.)");
                            }

                            if (Common.IsRequirementEnabled(1930204, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930204");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930204
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070906",
                                    errorCode,
                                    1930204,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070906. (<4> Section 3.1.4.1.2.2:  [Windows SharePoint Services truncates all characters after the first ""?"" in the file name. ] If the truncated file name does not exist on the server, Windows SharePoint Services 3.0 returns the 0x81070906 error code.)");
                            }
                        }
                        else if (invalidCharacter == "{")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17214");

                                // Verify MS-VERSS requirement: MS-VERSS_R17214
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17214,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Left curly bracket ({). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930114");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930114
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930114,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Left curly bracket ({). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "|")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17215");

                                // Verify MS-VERSS requirement: MS-VERSS_R17215
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17215,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Vertical bar (|). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930116");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930116
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930116,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Vertical bar (|). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "}")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17216");

                                // Verify MS-VERSS requirement: MS-VERSS_R17216
                                Site.CaptureRequirementIfAreEqual<string>(
                                        "0x81020030",
                                        errorCode,
                                        17216,
                                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Right curly bracket (}). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930117");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930117
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930117,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Right curly bracket (}). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "~")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17217");

                                // Verify MS-VERSS requirement: MS-VERSS_R17217
                                Site.CaptureRequirementIfAreEqual<string>(
                                        "0x81020030",
                                        errorCode,
                                        17217,
                                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Tilde (~). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930118");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930118
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930118,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Tilde (~). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "..")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17218");

                                // Verify MS-VERSS requirement: MS-VERSS_R17218
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17218,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Two consecutive dots (..). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930119");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930119
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930119,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Two consecutive dots (..). (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "\t")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17219");

                                // Verify MS-VERSS requirement: MS-VERSS_R17219
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020030",
                                    errorCode,
                                    17219,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character tab(\t), it is not at the end of the fileName. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930113");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930113
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930113,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character Tab (\t), it is not at the end of the fileName. (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "\n" || invalidCharacter == "\r")
                        {
                            if (isR17201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17220");

                                // Verify MS-VERSS requirement: MS-VERSS_R17220
                                Site.CaptureRequirementIfAreEqual<string>(
                                        "0x81020030",
                                        errorCode,
                                        17220,
                                        @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020030 to indicate that the fileName element of the DeleteAllVersions element contains invalid character that has a value less than 32 or greater than 126. (SharePoint Foundation 2010  and above follow this behavior.)");
                            }

                            if (isR1930101Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R1930120");

                                // Verify MS-VERSS requirement: MS-VERSS_R1930120
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070905",
                                    errorCode,
                                    1930120,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070905 to indicate that the fileName element of the DeleteAllVersions element contains invalid character that has a value less than 32 or greater than 126. (<3> Section 3.1.4.1.2.2: Windows SharePoint Services 3.0 returns the 0x81070905 error code for invalid characters.)");
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// A test case used to verify that the server returns soap fault message with corresponding error code 
        /// when the client calls the DeleteVersion operation with fileName contains invalid characters.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC09_DeleteVersionUsingInvalidCharacters()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // Enable the versioning of the list.
            bool isSetVersionSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersionSuccess, 
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isSetVersionSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess, 
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isAddFileSuccess);

            // Check out and check in file six times to create six versions of the file. 
            this.testSuiteHelper.AddFileVersions();
            this.testSuiteHelper.AddFileVersions();

            // The variable is used to save the response of DeleteVersion.
            DeleteVersionResponseDeleteVersionResult deleteVersionResponse;

            // The variable is used to save the invalid characters for file name.
            string[] invalidCharacters = new string[] 
            { 
                "\"", "#", "%", "&", "*", ":", "<", "=", ">", "?",
                "\\", "{", "|", "}", "~", "/", "..", "\t", "\n", "\r" 
            };

            // The variable is used to save the file relative URL that contains "# or ? and file name" 
            // which will be truncated, and '\t' or '\' is at the end of file name. So fileURL is still a valid URL.
            foreach (string truncatedCharacter in invalidCharacters)
            {
                if (truncatedCharacter == "#" || truncatedCharacter == "?" || truncatedCharacter == "\t" || truncatedCharacter == "\\")
                {
                    string fileURL = string.Empty;

                    // Call GetVersions with the relative filename to get details about all versions of the file.
                    GetVersionsResponseGetVersionsResult getVersionsResponse = this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);

                    // The variable is used to save the version needs to be deleted.
                    string deleteFileVersion = AdapterHelper.GetPreviousVersion(getVersionsResponse.results.result);

                    if (truncatedCharacter == "\t" || truncatedCharacter == "\\")
                    {
                        fileURL = this.documentLibrary + "/" + this.fileName + truncatedCharacter;
                    }
                    else if (truncatedCharacter == "#" || truncatedCharacter == "?")
                    {
                        fileURL = this.documentLibrary + "/" + this.fileName + truncatedCharacter + this.fileName;
                    }

                    // Call DeleteVersion operation to delete the specified file version via the valid file relative URL.
                    deleteVersionResponse = this.protocolAdapterInstance.DeleteVersion(fileURL, deleteFileVersion);
                    this.testSuiteHelper.VerifyResultsInformation(deleteVersionResponse.results, OperationName.DeleteVersion, true);

                    getVersionsResponse = this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);
                    bool isVersionDelete = deleteFileVersion != AdapterHelper.GetPreviousVersion(getVersionsResponse.results.result);

                    if (truncatedCharacter == "#")
                    {
                        if (Common.IsRequirementEnabled(197, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R197");

                            // Verify MS-VERSS requirement: MS-VERSS_R197
                            Site.CaptureRequirementIfIsTrue(
                                isVersionDelete,
                                197,
                                @"[In Appendix B: Product Behavior] Implementation does truncates all characters after the first ""#"" in the file name. (<6> Section 3.1.4.2.2.2: Windows SharePoint Services truncates all characters after the first pound sign ""#"" in the file name.)");
                        }
                    }
                    else if (truncatedCharacter == "?")
                    {
                        if (Common.IsRequirementEnabled(19702, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19702");

                            // Verify MS-VERSS requirement: MS-VERSS_R19702
                            Site.CaptureRequirementIfIsTrue(
                                isVersionDelete,
                                19702,
                                @"[In Appendix B: Product Behavior] Implementation does truncates all characters after the first ""?"" in the file name. (<6> Section 3.1.4.2.2.2: Windows SharePoint Services truncates all characters after the first question mark ""?"" in the file name.)");
                        }
                    }
                    else if (truncatedCharacter == "\t")
                    {
                        if (Common.IsRequirementEnabled(19704, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19704");

                            // Verify MS-VERSS requirement: MS-VERSS_R19704
                            Site.CaptureRequirementIfIsTrue(
                                isVersionDelete,
                                19704,
                                @"[In Appendix B: Product Behavior] Implementation does not return an error to indicate that the tab (\t) character is at the end of the fileName. (<6> Section 3.1.4.2.2.2: The tab (\t) character is ignored at the end of the fileName on Windows SharePoint Services 3.0, SharePoint Foundation 2010,SharePoint Foundation 2013 and SharePoint Server 2016.)");
                        }
                    }
                    else if (truncatedCharacter == "\\")
                    {
                        if (Common.IsRequirementEnabled(19705, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19705");

                            // Verify MS-VERSS requirement: MS-VERSS_R19705
                            Site.CaptureRequirementIfIsTrue(
                                isVersionDelete,
                                19705,
                                @"[In Appendix B: Product Behavior] Implementation does not return an error to indicate that the backward slash (\) character is at the end of the fileName. (<6> Section 3.1.4.2.2.2: The backward slash (\) character is ignored at the end of the fileName on Windows SharePoint Services 3.0, SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016.)");
                        }
                    }
                }
            }

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponseForVerifyInvalidCharacters =
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);

            // The variable is used to save the version needs to be deleted.
            string deleteFileVersionForVerifyInvalidCharacters = AdapterHelper.GetPreviousVersion(getVersionsResponseForVerifyInvalidCharacters.results.result);

            bool isR17601Enabled = Common.IsRequirementEnabled(17601, this.Site);
            bool isR19602Enabled = Common.IsRequirementEnabled(19602, this.Site);

            if (isR17601Enabled || isR19602Enabled || Common.IsRequirementEnabled(17602, this.Site) || Common.IsRequirementEnabled(19701, this.Site) || Common.IsRequirementEnabled(17621, this.Site)
                || Common.IsRequirementEnabled(19703, this.Site) || Common.IsRequirementEnabled(17600, this.Site) || Common.IsRequirementEnabled(19620, this.Site))
            {
                foreach (string invalidCharacter in invalidCharacters)
                {
                    // The variable is used to save the relative URL with invalid character.
                    string fileRelativeUrlWithInvalidCharacter = this.documentLibrary + "/" +
                        this.fileName.Substring(0, this.fileName.IndexOf(".", System.StringComparison.CurrentCulture)) + invalidCharacter +
                        this.fileName.Substring(this.fileName.IndexOf(".", System.StringComparison.CurrentCulture));

                    try
                    {
                        deleteVersionResponse =
                            this.protocolAdapterInstance.DeleteVersion(fileRelativeUrlWithInvalidCharacter, deleteFileVersionForVerifyInvalidCharacters);
                        Site.Assert.Fail(
                            "The DeleteVersion operation should fail. The invalid character is {0}",
                            invalidCharacter);
                    }
                    catch (SoapException ex)
                    {
                        errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                        errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                        Site.Log.Add(LogEntryKind.Debug, "The errorcode is {0},the errorstring is {1}", errorCode, errorString);

                        if (invalidCharacter == "\"")
                        {
                            if (isR17601Enabled)
                            { 
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17603");

                                // Verify MS-VERSS requirement: MS-VERSS_R17603
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17603,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Double quotation mark (""). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Verify MS-VERSS requirement: MS-VERSS_R19603
                                Site.CaptureRequirementIfAreEqual<string>(
                                   "0x81070970",
                                   errorCode,
                                   19603,
                                   @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Double quotation mark (""). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "#")
                        {
                            if (Common.IsRequirementEnabled(17602, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17602");

                                Site.CaptureRequirementIfAreEqual<string>(
                                  "0x80131600",
                                  errorCode,
                                  17602,
                                  @"[In Appendix B: Product Behavior] Implementation does return error code 0x80131600. (<6> Section 3.1.4.2.2.2: [Windows SharePoint Services truncates all characters after the first ""#"" in the file name.] If the truncated file name does not exist on the server, 0x80131600 is returned, except that Windows SharePoint Services 3.0 returns a SOAP exception.)");
                            }

                            if (Common.IsRequirementEnabled(19701, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19701");

                                // Verify MS-VERSS requirement: MS-VERSS_R19701
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "Object reference not set to an instance of an object.",
                                    errorString,
                                    19701,
                                    @"[In Appendix B: Product Behavior] Implementation does return a SOAP exception. (<6> Section 3.1.4.2.2.2: [Windows SharePoint Services truncates all characters after the first ""#"" in the file name.] If the truncated file name does not exist on the server, 0x80131600 is returned, except that Windows SharePoint Services 3.0 returns a SOAP exception.)");
                            }
                        }
                        else if (invalidCharacter == "%")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17605");

                                // Verify MS-VERSS requirement: MS-VERSS_R17605
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17605,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Percent sign (%). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19605");

                                // Verify MS-VERSS requirement: MS-VERSS_R19605
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19605,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Percent sign (%). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "&")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17606");

                                // Verify MS-VERSS requirement: MS-VERSS_R17606
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17606,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Ampersand (&). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19606");

                                // Verify MS-VERSS requirement: MS-VERSS_R19606
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19606,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Ampersand (&). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "*")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17607");

                                // Verify MS-VERSS requirement: MS-VERSS_R17607
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17607,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Asterisk (*). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19607");

                                // Verify MS-VERSS requirement: MS-VERSS_R19607
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19607,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Asterisk (*). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == ":")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17608");

                                // Verify MS-VERSS requirement: MS-VERSS_R17608
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17608,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Colon (:). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19608");

                                // Verify MS-VERSS requirement: MS-VERSS_R19608
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19608,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Colon (:). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "<")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17609");

                                // Verify MS-VERSS requirement: MS-VERSS_R17609
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17609,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Left angle bracket (<). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19609");

                                // Verify MS-VERSS requirement: MS-VERSS_R19609
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19609,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Left angle bracket (<). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "=")
                        {
                            string sutVersion = Common.GetConfigurationPropertyValue("SutVersion", this.Site);
                            if (Common.IsRequirementEnabled(19707, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19707");

                                // Verify MS-VERSS requirement: MS-VERSS_R19707
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x80131600",
                                    errorCode,
                                    19707,
                                    @"In Appendix B: Product Behavior] Implementation does return error code 0x80131600 if fileName contains equals sign (=). (<6> Section 3.1.4.1.2.2: If fileName contains equals sign (=), SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016 return error code 0x80131600.)");
                            } 
                            if (sutVersion == "WindowsSharePointServices3" || sutVersion == "SharePointServer2007")
                            {
                                Site.Assert.IsNull(errorCode, "{0} does not return an error code element, the errorCode is {1}.", sutVersion, errorCode);
                                Site.Assert.IsNotNull(errorString, "{0} returns a SOAP exception without an error code, the errorString is {1}.", sutVersion, errorString);
                            }
                        }
                        else if (invalidCharacter == ">")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17611");

                                // Verify MS-VERSS requirement: MS-VERSS_R17611
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17611,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Right angle bracket (>). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19611");

                                // Verify MS-VERSS requirement: MS-VERSS_R19611
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19611,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Right angle bracket (>). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "=")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17610");

                                // Verify MS-VERSS requirement: MS-VERSS_R17610
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17610,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Equal sign (=). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }
                        }
                        else if (invalidCharacter == "?")
                        {
                            if (Common.IsRequirementEnabled(17621, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17621");

                                // Verify MS-VERSS requirement: MS-VERSS_R17621
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x80131600",
                                    errorCode,
                                    17621,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x80131600. (<6> Section 3.1.4.2.2.2: [Windows SharePoint Services truncates all characters after the first ""?"" in the file name.] If the truncated file name does not exist on the server, 0x80131600 is returned, except that Windows SharePoint Services 3.0 returns a SOAP exception.)");
                            }

                            if (Common.IsRequirementEnabled(19703, this.Site))
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19703");

                                // Verify MS-VERSS requirement: MS-VERSS_R19703
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "Object reference not set to an instance of an object.",
                                    errorString,
                                    19703,
                                    @"[In Appendix B: Product Behavior] Implementation does return a SOAP exception. (<6> Section 3.1.4.2.2.2: [Windows SharePoint Services truncates all characters after the first ""?"" in the file name.] If the truncated file name does not exist on the server, 0x80131600 is returned, except that Windows SharePoint Services 3.0 returns a SOAP exception.)");
                            }
                        }
                        else if (invalidCharacter == "{")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17614");

                                // Verify MS-VERSS requirement: MS-VERSS_R17614
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17614,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Left curly bracket ({). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19614");

                                // Verify MS-VERSS requirement: MS-VERSS_R19614
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19614,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Left curly bracket ({). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "|")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17615");

                                // Verify MS-VERSS requirement: MS-VERSS_R17615
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17615,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Vertical bar (|). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19615");

                                // Verify MS-VERSS requirement: MS-VERSS_R19615
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19615,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Vertical bar (|). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "}")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17616");

                                // Verify MS-VERSS requirement: MS-VERSS_R17616
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17616,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Right curly bracket (}). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19616");

                                // Verify MS-VERSS requirement: MS-VERSS_R19616
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19616,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Right curly bracket (}). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "~")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17617");

                                // Verify MS-VERSS requirement: MS-VERSS_R17617
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17617,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Tilde (~). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19617");

                                // Verify MS-VERSS requirement: MS-VERSS_R19617
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19617,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Tilde (~). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "/")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17604");

                                // Verify MS-VERSS requirement: MS-VERSS_R17604
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17604,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Forward slash (/). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19604");

                                // Verify MS-VERSS requirement: MS-VERSS_R19604
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19604,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Forward slash (/). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "..")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17618");

                                // Verify MS-VERSS requirement: MS-VERSS_R17618
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17618,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid character Two consecutive dots (..). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19618");

                                // Verify MS-VERSS requirement: MS-VERSS_R19618
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19618,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Two consecutive dots (..). (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "\t")
                        {
                            if (Common.IsRequirementEnabled(17600, this.Site))
                            {
                                // Verify MS-VERSS requirement: MS-VERSS_R17600
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17600,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid  character Tab (\t) character, it is not at the end of the fileName. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (Common.IsRequirementEnabled(19620, this.Site))
                            {
                                // Verify MS-VERSS requirement: MS-VERSS_R19620
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19620,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character Tab (\t) character, it is not at the end of the fileName. (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                        else if (invalidCharacter == "\n" || invalidCharacter == "\r")
                        {
                            if (isR17601Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R17620");

                                // Verify MS-VERSS requirement: MS-VERSS_R17620
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    17620,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the fileName element of the DeleteVersion element contains invalid  character that has a value less than 32 or greater than 126. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR19602Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19619");

                                // Verify MS-VERSS requirement: MS-VERSS_R19619
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81070970",
                                    errorCode,
                                    19619,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the fileName element of the DeleteVersion element contains invalid character that has a value less than 32 or greater than 126. (<5> Section 3.1.4.2.2.2:  Windows SharePoint Services 3.0 returns the 0x81070970 error code for invalid characters.)");
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// A test case used to verify that the server returns soap fault message with corresponding error code
        /// when the client calls the RestoreVersion operation with fileName contains invalid characters.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC10_RestoreVersionUsingInvalidCharacters()
        {
            // The variable is used to save the soap error code returned from server.
            string errorCode = string.Empty;

            // The variable is used to save the soap error string returned from server.
            string errorString = string.Empty;

            // The variable is used to save the folder name.
            string folderName = "MS-VERSS_Subfolder";

            // The variable is used to save product version.
            string sutVersion = Common.GetConfigurationPropertyValue("SutVersion", this.Site);

            // Enable the versioning of the list.
            bool isSetVersioningSuccess = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                isSetVersioningSuccess,
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isSetVersioningSuccess);

            // Upload the file into specific list.
            bool isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess,
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isAddFileSuccess);

            // Create a new folder in specific list.
            bool isAddFolderSuccess =
                this.sutControlAdapterInstance.AddFolder(this.documentLibrary, folderName);
            Site.Assert.IsTrue(
                isAddFolderSuccess,
                "AddFolder operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFolderSuccess);

            // Upload the file into specific folder in specific list.
            isAddFileSuccess =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary + "/" + folderName, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccess,
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddFileSuccess);

            // Check out and check in file one time to create a new version for each file. 
            this.testSuiteHelper.AddOneFileVersion(this.fileName);
            this.testSuiteHelper.AddOneFileVersion(folderName + "/" + this.fileName);

            // The variable is used to save the invalid characters for file name.
            string[] invalidCharacters = new string[]
            {
                "%", "&", "*", ":", "<", ">", "?", "/", "{", "|", "}",
                "~", "\"", "\\", "..", "#", "\n", "\r" 
            };

            // The variable is used to save the file relative URL that contains '/' or ".." is at the end of file name.
            foreach (string truncatedCharacter in invalidCharacters)
            {
                if (truncatedCharacter == "/" || truncatedCharacter == "..")
                {
                    string fileURL = string.Empty;

                    // Call GetVersions with the relative filename to get details about all versions of the file.
                    GetVersionsResponseGetVersionsResult getVersionsResponse = this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);

                    // Get the current version of the file.
                    string currentVersionBeforeRestore = AdapterHelper.GetCurrentVersion(getVersionsResponse.results.result);

                    // Get the previous version which is specific to be restored.
                    string restoreFileVersion = AdapterHelper.GetPreviousVersion(getVersionsResponse.results.result);

                    fileURL = this.documentLibrary + "/" + this.fileName + truncatedCharacter;

                    // Call RestoreVersion operation using relative fileName and restore a specified file to a specific version.
                    RestoreVersionResponseRestoreVersionResult restoreVersionReponse = this.protocolAdapterInstance.RestoreVersion(fileURL, restoreFileVersion);

                    // Verify the RestoreVersion results.
                    this.testSuiteHelper.VerifyResultsInformation(restoreVersionReponse.results, OperationName.RestoreVersion, true);

                    // Get the current version in RestoreVersion response.
                    string currentVersionAfterRestore = AdapterHelper.GetCurrentVersion(restoreVersionReponse.results.result);

                    // Verify whether the current version was increased by RestoreVersion.
                    bool isCurrentVersionIncreased = AdapterHelper.IsCurrentVersionIncreased(
                        currentVersionBeforeRestore,
                        currentVersionAfterRestore);

                    if (truncatedCharacter == "/")
                    {
                        if (Common.IsRequirementEnabled(24902, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24902");

                            // Verify MS-VERSS requirement: MS-VERSS_R24902
                            Site.CaptureRequirementIfIsTrue(
                                isCurrentVersionIncreased,
                                24902,
                                @"[In Appendix B: Product Behavior] Implementation does not return an error to indicate that the forward slash (/) character is at the end of the fileName.(<10> Section 3.1.4.4.2.2: In Windows SharePoint Services 3.0, SharePoint Foundation 2010,SharePoint Foundation 2013 and SharePoint Server 2016, the forward slash (/) character is ignored at the end of the fileName.)");
                        }
                    }

                    if (truncatedCharacter == "..")
                    {
                        if (Common.IsRequirementEnabled(24901, this.Site))
                        {
                            // Add the debug information
                            Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24901");

                            // Verify MS-VERSS requirement: MS-VERSS_R24901
                            Site.CaptureRequirementIfIsTrue(
                                isCurrentVersionIncreased,
                                24901,
                                @"[In Appendix B: Product Behavior] Implementation does not return an error to indicate that two consecutive dots (..) is at the end of the fileName. (<10> Section 3.1.4.4.2.2: In Windows SharePoint Services 3.0, SharePoint Foundation 2010, SharePoint Foundation 2013 and SharePoint Server 2016, two consecutive dots (..) are ignored at the end of the fileName.)");
                        }

                        if (sutVersion == "SharePointFoundation2013" || sutVersion == "SharePointServer2013")
                        {
                            Site.Assert.IsTrue(
                                isCurrentVersionIncreased,
                                "{0} does not return an error to indicate that two consecutive dots (..) is at the end of the fileName.",
                                sutVersion);
                        }
                    }
                }
            }

            // The variable is used to save the file relative URL that contains ".." is at the end of folder name.
            string truncatedCharacterInFolderName = "..";
            string fileURLWithFolderName = string.Empty;

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponseForFolderName = this.protocolAdapterInstance.GetVersions(this.documentLibrary + "/" + folderName + "/" + this.fileName);

            // Get the current version of the file.
            string currentVersion = AdapterHelper.GetCurrentVersion(getVersionsResponseForFolderName.results.result);

            // Get the previous version which is specific to be restored.
            string restoreVersion = AdapterHelper.GetPreviousVersion(getVersionsResponseForFolderName.results.result);

            fileURLWithFolderName = this.documentLibrary + "/" + folderName + truncatedCharacterInFolderName + "/" + this.fileName;

            // Call RestoreVersion operation using relative fileName and restore a specified file to a specific version.
            RestoreVersionResponseRestoreVersionResult restoreVersionReponseForFolderName = this.protocolAdapterInstance.RestoreVersion(fileURLWithFolderName, restoreVersion);

            // Get the current version in RestoreVersion response.
            string afterRestoreVersion = AdapterHelper.GetCurrentVersion(restoreVersionReponseForFolderName.results.result);

            // Verify whether the current version was increased by RestoreVersion.
            bool isIncreased = AdapterHelper.IsCurrentVersionIncreased(
                currentVersion,
                afterRestoreVersion);
                    
            Site.Assert.IsTrue(
                isIncreased,
                "{0} does not return an error to indicate that two consecutive dots (..) is at the end of the folder name.",
                sutVersion);

            // Call GetVersions with the relative filename to get details about all versions of the file.
            GetVersionsResponseGetVersionsResult getVersionsResponseForVerifyInvalidCharacters = 
                this.protocolAdapterInstance.GetVersions(this.fileRelativeUrl);

            // The variable is used to save the version needs to be restored.
            string restoreFileVersionForVerifyInvalidCharacters = AdapterHelper.GetPreviousVersion(getVersionsResponseForVerifyInvalidCharacters.results.result);

            // Call GetVersions with the relative filename to get details about all versions of the file in the sub folder.
            GetVersionsResponseGetVersionsResult getVersionsResponseForVerifyInvalidCharactersInFolder =
                this.protocolAdapterInstance.GetVersions(this.documentLibrary + "/" + folderName + "/" + this.fileName);

            // The variable is used to save the version needs to be restored for the file in the sub folder.
            string restoreFileVersionForVerifyInvalidCharactersInFolder = AdapterHelper.GetPreviousVersion(getVersionsResponseForVerifyInvalidCharactersInFolder.results.result);

            bool isR19201Enabled = Common.IsRequirementEnabled(19201, this.Site);
            bool isR201Enabled = Common.IsRequirementEnabled(201, this.Site);
            bool isR24500Enabled = Common.IsRequirementEnabled(24500, this.Site);
            bool isR202Enabled = Common.IsRequirementEnabled(202, this.Site);
            
            // Verify whether the fileName contain invalid character.
            if (isR19201Enabled || isR201Enabled)
            {
                foreach (string invalidCharacter in invalidCharacters)
                {
                    string fileRelativeUrlWithInvalidCharacter = this.documentLibrary + "/" +
                        this.fileName.Substring(0, this.fileName.IndexOf(".", System.StringComparison.CurrentCulture)) + invalidCharacter +
                        this.fileName.Substring(this.fileName.IndexOf(".", System.StringComparison.CurrentCulture));

                    try
                    {
                        this.protocolAdapterInstance.RestoreVersion(fileRelativeUrlWithInvalidCharacter, restoreFileVersionForVerifyInvalidCharacters);
                        Site.Assert.Fail(
                            "The RestoreVersion operation should fail. The invalid character is {0}",
                            invalidCharacter);
                    }
                    catch (SoapException ex)
                    {
                        errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                        errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "The errorcode is {0}, the errorstring value is {1}",
                            errorCode,
                            errorString);
                        if (invalidCharacter == "%")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19202");

                                // Verify MS-VERSS requirement: MS-VERSS_R19202
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19202,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Percent sign (%). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20102");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20102
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20102,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Percent sign (%). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "&")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19203");

                                // Verify MS-VERSS requirement: MS-VERSS_R19203
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19203,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Ampersand (&). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20103");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20103
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20103,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Ampersand (&). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "*")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19204");

                                // Verify MS-VERSS requirement: MS-VERSS_R19204
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19204,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Asterisk (*). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20104");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20104
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20104,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Asterisk (*). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == ":")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19205");

                                // Verify MS-VERSS requirement: MS-VERSS_R19205
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19205,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Colon (:). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20105");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20105
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20105,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Colon (:). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "<")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19206");

                                // Verify MS-VERSS requirement: MS-VERSS_R19206
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19206,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Left angle bracket (<). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20106");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20106
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20106,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Left angle bracket (<). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == ">")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19207");

                                // Verify MS-VERSS requirement: MS-VERSS_R19207
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19207,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Right angle bracket (>). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20107");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20107
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20107,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Right angle bracket (>). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "{")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19210");

                                // Verify MS-VERSS requirement: MS-VERSS_R19210
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19210,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Left curly bracket ({). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20110");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20110
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20110,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Left curly bracket ({). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "|")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19211");

                                // Verify MS-VERSS requirement: MS-VERSS_R19211
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19211,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Vertical bar (|). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20111");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20111
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20111,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Vertical bar (|). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "}")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19212");

                                // Verify MS-VERSS requirement: MS-VERSS_R19212
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19212,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Right curly bracket (}). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20112");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20112
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20112,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Right curly bracket (}). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "~")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19213");

                                // Verify MS-VERSS requirement: MS-VERSS_R19213
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19213,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Tilde (~). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20113");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20113
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20113,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Tilde (~). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "\"")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19216");

                                // Verify MS-VERSS requirement: MS-VERSS_R19216
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19216,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Double quotation mark (""). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20116");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20116
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20116,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Double quotation mark (""). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "\\")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19217");

                                // Verify MS-VERSS requirement: MS-VERSS_R19217
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19217,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Backward slash (\). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20117");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20117
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20117,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Backward (\). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "..")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19214");

                                // Verify MS-VERSS requirement: MS-VERSS_R19214
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19214,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character Two consecutive dots (..), the invalid character is not at the end of the fileName. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                                                {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20114");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20114
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                     errorCode,
                                    20114,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character Two consecutive dots (..), the invalid character is not at the end of the fileName. (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "\n" || invalidCharacter == "\r")
                        {
                            if (isR19201Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R19215");

                                // Verify MS-VERSS requirement: MS-VERSS_R19215
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    19215,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the filename element of the RestoreVersion element contains invalid character that has a value less than 32 or greater than 126. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR201Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20115");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20115
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20115,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 indicate that the fileName element of the RestoreVersion element contains invalid character that has a value less than 32 or greater than 126. (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                    }
                }
            }

            // Verify whether the folder name contain invalid character.
            if (isR24500Enabled || isR202Enabled)
            {
                foreach (string invalidCharacter in invalidCharacters)
                {
                    string fileRelativeUrlWithInvalidCharacter = this.documentLibrary + "/" +
                        folderName + invalidCharacter + folderName + "/" + this.fileName;

                    try
                    {
                        this.protocolAdapterInstance.RestoreVersion(fileRelativeUrlWithInvalidCharacter, restoreFileVersionForVerifyInvalidCharactersInFolder);
                        Site.Assert.Fail(
                            "The RestoreVersion operation should fail. The invalid character is {0}",
                            invalidCharacter);
                    }
                    catch (SoapException ex)
                    {
                        errorCode = Common.ExtractErrorCodeFromSoapFault(ex);
                        errorString = AdapterHelper.ExtractErrorStringFromSoapFault(ex);
                        Site.Log.Add(
                            LogEntryKind.Debug,
                            "The value of errorcode is {0}, the errorstring is {1}",
                            errorCode,
                            errorString);

                        if (invalidCharacter == "%")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24502");

                                // Verify MS-VERSS requirement: MS-VERSS_R24502
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24502,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Percent sign (%). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20202");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20202
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                     errorCode,
                                    20202,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Percent sign (%). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "&")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24503");

                                // Verify MS-VERSS requirement: MS-VERSS_R24503
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24503,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Ampersand (&). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20203");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20203
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20203,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Ampersand (&). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "*")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24504");

                                // Verify MS-VERSS requirement: MS-VERSS_R24504
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24504,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Asterisk (*). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20204");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20204
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20204,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Asterisk (*). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == ":")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24505");

                                // Verify MS-VERSS requirement: MS-VERSS_R24505
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24505,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Colon (:). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20205");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20205
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20205,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Colon (:). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "<")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24506");

                                // Verify MS-VERSS requirement: MS-VERSS_R24506
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24506,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Left angle bracket (<). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20206");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20206
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20206,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Left angle bracket (<). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == ">")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24507");

                                // Verify MS-VERSS requirement: MS-VERSS_R24507
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24507,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Right angle bracket (>). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20207");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20207
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20207,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Right angle bracket (>). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "{")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24510");

                                // Verify MS-VERSS requirement: MS-VERSS_R24510
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24510,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Left curly bracket ({). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20210");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20210
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20210,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Left curly bracket ({). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "|")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24511");

                                // Verify MS-VERSS requirement: MS-VERSS_R24511
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24511,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Vertical bar (|). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20211");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20211
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20211,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Vertical bar (|). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "}")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24512");

                                // Verify MS-VERSS requirement: MS-VERSS_R24512
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24512,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Right curly bracket (}). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20212");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20212
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20212,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Right curly bracket (}). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "~")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24513");

                                // Verify MS-VERSS requirement: MS-VERSS_R24513
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24513,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Tilde (~). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20213");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20213
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20213,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Tilde (~). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "..")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24514");

                                // Verify MS-VERSS requirement: MS-VERSS_R24514
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24514,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Two consecutive dots (..), the invaild characters is not at the end of folder name. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20214");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20214
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20214,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Two consecutive dots (..), the invalid characters is not at the end of folder name. (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "\n" || invalidCharacter == "\r")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24516");

                                // Verify MS-VERSS requirement: MS-VERSS_R24516
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24516,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character that has a value less than 32 or greater than 126. (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20216");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20216
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20216,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character that has a value less than 32 or greater than 126. (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                        else if (invalidCharacter == "\"")
                        {
                            if (isR24500Enabled)
                            {
                                // Add the debug information
                                Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R24517");

                                // Verify MS-VERSS requirement: MS-VERSS_R24517
                                Site.CaptureRequirementIfAreEqual<string>(
                                    "0x81020073",
                                    errorCode,
                                    24517,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81020073 to indicate that the folder name of the RestoreVersion element contains invalid character Double quotation mark (""). (SharePoint Foundation 2010 and above follow this behavior.)");
                            }

                            if (isR202Enabled)
                            {
                                // Add the debug information
                                this.Site.Log.Add(LogEntryKind.Debug, "Verify MS-VERSS_R20217");
        
                                // Verify MS-VERSS requirement: MS-VERSS_R20217
                                this.Site.CaptureRequirementIfAreEqual(
                                    "0x81070970",
                                    errorCode,
                                    20217,
                                    @"[In Appendix B: Product Behavior] Implementation does return error code 0x81070970 to indicate that the folder name of the RestoreVersion element contains invalid character Double quotation mark (""). (<11> Section 3.1.4.4.2.2: Windows SharePoint Services 3.0 returns error code 0x81070970 for invalid characters with the description, ""The file or folder name fileName contains invalid characters. Please use a different name. Common invalid characters include the following: # % &amp; *: &lt; &gt; ? / { | }"".)");
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// A test case used to verify that the server faults can be returned via HTTP status codes.
        /// </summary>
        [TestCategory("MSVERSS"), TestMethod()]
        public void MSVERSS_S03_TC11_VerifyHTTPFault()
        {
            #region upload file to site and create versions.

            // Enable the versioning of the list. 
            bool setVersioning = this.sutControlAdapterInstance.SetVersioning(this.documentLibrary, true, true);
            Site.Assert.IsTrue(
                setVersioning, 
                "SetVersioning operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                setVersioning);

            // Upload the file into specific list. 
            bool isAddFileSuccessful =
                this.sutControlAdapterInstance.AddFile(this.documentLibrary, this.fileName, TestSuiteHelper.UploadFileName);
            Site.Assert.IsTrue(
                isAddFileSuccessful,
                "AddFile operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed", 
                isAddFileSuccessful);

            // Get the relative name of the file. 
            string fileUrl = this.documentLibrary + "/" + this.fileName;

            // Check out and check in file one time to create a new version of the file. 
            this.testSuiteHelper.AddOneFileVersion(this.fileName);

            #endregion

            this.protocolAdapterInstance.InitializeUnauthorizedService();

            try
            {
                this.protocolAdapterInstance.GetVersions(fileUrl);
                Site.Assert.Fail("The GetVersions operation should fail.");
            }
            catch (SoapException ex)
            {
                Site.Assert.Pass("The soap fault is returned, the error information is {0}", ex.Message);
            }
            catch (WebException ex)
            {
                Site.Assert.Pass("The http fault is returned, the error information is {0}", ex.Message);
            }
            finally
            {
                this.protocolAdapterInstance.Initialize(this.Site);
            }
        }
        #endregion

        #region Test Case Initialization

        /// <summary>
        /// Initialize test case and test environment.
        /// </summary>
        [TestInitialize]
        public void TestCaseInitialize()
        {
            this.sutControlAdapterInstance = this.Site.GetAdapter<IMS_VERSSSUTControlAdapter>();
            this.protocolAdapterInstance = this.Site.GetAdapter<IMS_VERSSAdapter>();
            Common.CheckCommonProperties(this.Site, true);
            this.listsSutControlAdaterInstance = this.Site.GetAdapter<IMS_LISTSWSSUTControlAdapter>();

            #region Initialize the variables
            string datetimestamp = Common.FormatCurrentDateTime();

            this.documentLibrary = Common.GetConfigurationPropertyValue("DocumentLibraryName", this.Site) +
                "_" + datetimestamp;
            string fileNameValue = Common.GetConfigurationPropertyValue("FileName", this.Site);
            this.fileName = System.IO.Path.GetFileNameWithoutExtension(fileNameValue) +
                "_" + datetimestamp +
                System.IO.Path.GetExtension(fileNameValue);

            this.fileRelativeUrl = this.documentLibrary + "/" + this.fileName;
            #endregion

            #region Initialize the server
            bool isAddList = this.listsSutControlAdaterInstance.AddList(this.documentLibrary);
            Site.Assert.IsTrue(
                isAddList,
                "AddList operation returns {0}, TRUE means the operation was executed successfully," +
                " FALSE means the operation failed",
                isAddList);
            #endregion

            this.testSuiteHelper = new TestSuiteHelper(
                    this.Site,
                    this.documentLibrary,
                    this.fileName,
                    this.listsSutControlAdaterInstance,
                    this.protocolAdapterInstance,
                    this.sutControlAdapterInstance);
        }

        /// <summary>
        /// Clean up test environment.
        /// </summary>
        [TestCleanup]
        public void TestCaseCleanup()
        {
            this.testSuiteHelper.CleanupTestEnvironment();
        }
        #endregion
    }
}